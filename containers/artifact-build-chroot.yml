---
# Copyright 2017, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Create artifact container
  hosts: localhost
  connection: local
  vars:
    image_name: "{{ role_name | replace('os_', '') }}"
  vars_files:
    - container-vars.yml
  tasks:

    - name: Remove base container
      lxc_container:
        name: "LXC_NAME"
        state: absent

    - name: Create base container
      lxc_container:
        name: "LXC_NAME"
        template: "download"
        state: "stopped"
        backing_store: "dir"
        template_options: >
          --dist {{ ansible_distribution | lower }}
          --release {{ ansible_distribution_release | lower }}
          --arch {{ architecture_mapping.get( ansible_architecture ) }}
          --force-cache
          --server images.linuxcontainers.org
          --keyserver hkp://p80.pool.sks-keyservers.net:80

    - name: Prepare group of master lxc hosts
      add_host:
        name: "/var/lib/lxc/LXC_NAME/rootfs/"
        groups: "lxc_container_artifact_chroots,{{ image_name }}_all"
        container_name: "LXC_NAME"
        physical_host: "localhost"

    # The nova role uses the with_random_choice lookup. The lookup is
    # processed before the task, so the lookup must be able to work
    # even if the task is not processed. For the lookup to work, the
    # group used by the lookup must have at least one member.
    - name: Populate the nova_conductor group
      add_host:
        name: "/var/lib/lxc/LXC_NAME/rootfs/"
        groups: "nova_conductor"
        container_name: "LXC_NAME"
        physical_host: "localhost"
      when:
        - "image_name == 'nova'"
  tags:
    - always



- name: Install python
  hosts: lxc_container_artifact_chroots
  gather_facts: False
  connection: chroot
  vars_files:
    - container-vars.yml
  tasks:

    - name: Configure chroot
      raw: |
        if [ -e /etc/resolv.conf ]; then
          mv /etc/resolv.conf /etc/resolv.conf.org
        fi
        echo "nameserver 8.8.8.8" > /etc/resolv.conf
        mount -t proc proc /proc || true
        test -e /usr/bin/python || (apt-get -y update && apt-get install -y python-minimal)
      tags:
        - always

    # TODO(odyssey4me):
    # Remove this once all roles have developer mode package
    # install tasks which include git.
    - name: When using developer_mode install git
      apt:
        name: "git-core"
        state: present
      when: "(developer_mode | default('no')) | bool"
  tags:
    - always



- name: Run role
  hosts: lxc_container_artifact_chroots
  gather_facts: True
  connection: chroot
  strategy: tagfilter
  vars:
    skip_tags:
      - config
    skip_handlers: True
    image_name: "{{ role_name | replace('os_', '') }}"
  vars_files:
    - container-vars.yml
  pre_tasks:

    - name: Set facts to pass some variables that wouldn't work #like '{{ image_name }}_developer_mode'
      set_fact: '{{ image_name }}_{{ item.key }}="{{ item.value }}"'
      with_dict: "{{ role_vars }}"
      tags:
        - always

  roles:
    - role: "{{ role_name }}"

  post_tasks:
    - name: chroot cleanup
      shell: |
        if [ -e /etc/resolv.conf.org ]; then
          mv /etc/resolv.conf.org /etc/resolv.conf
        else
          rm -f /etc/resolv.conf
        fi
        apt-get clean
        rm -rf /root/.cache/pip/
        rm -rf /root/.ssh
        umount /proc || true
      tags:
        - always



- name: Create artifact container
  hosts: localhost
  connection: local
  gather_facts: no
  vars_files:
    - container-vars.yml
  vars:
    image_name: "{{ role_name | replace('os_', '') }}"
  tasks:

    - name: Set artifact facts
      set_fact:
        image_path: "{{ lxc_image_folder }}/{{ lxc_index_path }}/{{ image_name }}-{{ rpc_release }}/{{ build_id }}/"

    - name: Ensure image doesn't exist yet.
      file:
        path: "{{ image_path }}"
        state: absent

    - name: Container image directories
      file:
        path: "{{ item }}"
        state: "directory"
        recurse: true
      with_items:
        - "{{ image_path }}"
        - "{{ lxc_image_folder }}/"

    - name: Create lxc image
      shell: |
        tar -Jcf rootfs.tar.xz -C /var/lib/lxc/LXC_NAME/rootfs .
      args:
        chdir: "{{ image_path }}"
        creates: "{{ image_path }}/rootfs.tar.xz"
        executable: /bin/bash

    - name: Create lxc image meta
      shell: |
        tar -Jcf meta.tar.xz -C {{ lxc_container_cache_path }}/{{ lxc_index_path }}/default {build_id,config,config-user,create-message,excludes-user,expiry,templates}
      args:
        chdir: "{{ image_path }}"
        creates: "{{ image_path }}/meta.tar.xz"
        executable: /bin/bash

    - name: Create release index entries
      lineinfile:
        dest: "{{ built_container_artifact_metadata_file }}"
        line: "{{ lxc_index_entry }};{{ image_name }}-{{ rpc_release }};{{ build_id }};/{{ rpc_mirror_container_relative_image_location }}/"
        create: yes
        state: present

    - name: create sha256sums
      shell: |
        echo "$(sha256sum {{ image_path }}/rootfs.tar.xz | awk '{print $1}') rootfs.tar.xz" | tee SHA256SUMS
        echo "$(sha256sum {{ image_path }}/meta.tar.xz | awk '{print $1}') meta.tar.xz" | tee -a SHA256SUMS
      args:
        chdir: "{{ image_path }}"

  post_tasks:
    - name: Remove base container
      lxc_container:
        name: "LXC_NAME"
        state: absent
  tags:
    - always



- name: container artifacts metadata prep
  hosts: localhost
  connection: local
  vars_files:
    - container-vars.yml
  vars:
    image_name: "{{ role_name | replace('os_', '') }}"
  tasks:

    - name: Check if the list exist to avoid re-hitting the server
      stat:
        path: /opt/list
      register: metadata_file_locally_exists

    - name: get the container artifacts list
      get_url:
        url: "{{ rpc_mirror_container_images_list }}"
        dest: "/opt/list"
      when: not metadata_file_locally_exists.stat.exists

    - name: patch the current list with the new artifact
      lineinfile:
        dest: "/opt/list"
        regexp: "^{{ lxc_index_entry }};{{ image_name }}-{{ rpc_release }}"
        line: "{{ lookup('file', built_container_artifact_metadata_file ) }}"

    - name: Remove the metadata file
      file:
        path: "{{ built_container_artifact_metadata_file }}"
        state: absent
  tags:
    - always
